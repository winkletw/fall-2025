using JLD, Random, LinearAlgebra, Statistics, CSV, DataFrames, FreqTables,Distributions 

cd(@__DIR__)

#-------------------------------------------------------------------------------
# question 1
#-------------------------------------------------------------------------------

Random.seed!(1234)

function q1()
    #---------------------------------------------------------------------------
    # part a 
    #---------------------------------------------------------------------------

    A = rand(Uniform(-5, 10), 10, 7)
    B = rand(Normal(-2, 15), 10, 7)
    C = [A[1:5, 1:5] B[1:5, end-1:end]]
    D = A .* (A .<= 0)

    #---------------------------------------------------------------------------
    # part b
    #---------------------------------------------------------------------------

    length(A)
    size(A)

    #---------------------------------------------------------------------------
    # part c
    #---------------------------------------------------------------------------

    length(D)
    length(unique(D))

    #---------------------------------------------------------------------------
    # part d
    #---------------------------------------------------------------------------

    E = reshape(B, 70, 1)

    #---------------------------------------------------------------------------
    # part e
    #---------------------------------------------------------------------------

    F = cat(A, B, dims = 3)

    #---------------------------------------------------------------------------
    # part f
    #---------------------------------------------------------------------------

    F = permutedims(F, (3, 1, 2))

    #---------------------------------------------------------------------------
    # part g
    #---------------------------------------------------------------------------

    G = kron(B, C)

    # H = kron(C, F) # ERROR: kronecker products require aligned dimensions

    #---------------------------------------------------------------------------
    # part h
    #---------------------------------------------------------------------------

    save("matrixpractice.jld", "A", A, "B", B, "C", C, "D", D, "E", E, "F", F, "G", G)

    #---------------------------------------------------------------------------
    # part i
    #---------------------------------------------------------------------------

    save("firstmatrix.jld", "A", A, "B", B, "C", C, "D", D)

    #---------------------------------------------------------------------------
    # part j
    #---------------------------------------------------------------------------

    CSV.write("matrixC.csv", DataFrame(C, :auto))

    #---------------------------------------------------------------------------
    # part k
    #---------------------------------------------------------------------------

    df_D = DataFrame(D, :auto)
    CSV.write("Dmatrix.dat", df_D; delim='\t')

    DataFrame(D, :auto) |> x -> CSV.write("Dmatrix.dat", x; delim='\t')

    return A, B, C, D
end 

#-------------------------------------------------------------------------------
# question 2
#-------------------------------------------------------------------------------

function q2(A, B, C)
    #---------------------------------------------------------------------------
    # part a (r = rows, c = cols)
    #---------------------------------------------------------------------------

    AB = zeros(size(A))
    for r in axes(A, 1)
        for c in axes(A, 2)
            AB[r, c] = A[r, c] * B[r, c]
        end
    end

    AB = A .* B

    #---------------------------------------------------------------------------
    # part b
    #---------------------------------------------------------------------------

    Cprime = Float64[]

    for c in axes(C, 2)
        for r in axes(C, 1)
            if C[r, c] >= -5 && C[r, c] <= 5
                push!(Cprime, C[r, c])
            end
        end
    end

    Cprime2 = C[(C .>= -5) .& (C .<= 5)]

    # compare the two vectors
    Cprime == Cprime2 
    if Cprime != Cprime2
        @show size(Cprime)
        @show size(Cprime2)
        @show Cprime .== Cprime2
        error("vectors are not equal")
    end

    #---------------------------------------------------------------------------
    # part c
    #---------------------------------------------------------------------------

    N, K, T = 15_169, 6, 5
    X = zeros(N, K, T)

    # ordering of second dimension:
    # 1 intercept
    # 2 dummy variable
    # 3 continuous variable (normal)
    # 4 normal
    # 5 binomial (discrete normal)
    # 6 another binomial

    for i in axes(X, 1)
        X[i, 1, :] .= 1.0
        X[i, 5, :] .= rand(Binomial(20, 0.6))
        X[i, 6, :] .= rand(Binomial(20, 0.5))
        for t in axes(X, 3)
            X[i, 2, t] <= 0.75 * (6 - t) / 5
            X[i, 3, t] = rand(Normal(15 + t - 1, 5(t-1)))
            X[i, 4, t] = rand(Normal(π* (6 - t), 1/exp(1)))
        end
    end

    #---------------------------------------------------------------------------
    # part d
    #---------------------------------------------------------------------------

    β = zeros(K, T)
    β[1, :] = [1 + 0.25*(t - 1) for t in 1:T]
    β[2, :] = [log(t) for t in 1:T]
    β[3, :] = [-sqrt(t) for t in 1:T]
    β[4, :] = [exp(t) - exp(t + 1) for t in 1:T]
    β[5, :] = [t for t in 1:T]
    β[6, :] = [t/3 for t in 1:T]

    #---------------------------------------------------------------------------
    # part e
    #---------------------------------------------------------------------------

    Y = [X[:, :, t] * β[:, t] .+ rand(Normal(0, 0.36)) for t in 1:T]

    return nothing
end

#-------------------------------------------------------------------------------
# question 3
#-------------------------------------------------------------------------------

function q3()
    #---------------------------------------------------------------------------
    # part a
    #---------------------------------------------------------------------------

    df = DataFrame(CSV.File("nlsw88.csv"))
    @show df[1:5, :]
    @show typeof(df[:, :grade])
    CSV.write("nlsw88_cleaned.csv", df)

    #---------------------------------------------------------------------------
    # part b
    #---------------------------------------------------------------------------

    @show mean(df[:, :never_married])

    #---------------------------------------------------------------------------
    # part c
    #---------------------------------------------------------------------------

    @show freqtable(df[:, :race])

    #---------------------------------------------------------------------------
    # part d
    #---------------------------------------------------------------------------

    vars = names(df)
    summarystats = describe(df)
    @show summarystats

    #---------------------------------------------------------------------------
    # part e
    #---------------------------------------------------------------------------

    @show freqtable(df[:, :industry], df[:, :occupation])

    #---------------------------------------------------------------------------
    # part f
    #---------------------------------------------------------------------------

    df_sub = df[:, [:industry, :occupation, :wage]]
    grouped = groupby(df_sub, [:industry, :occupation])
    mean_wage = combine(grouped, :wage => mean => :mean_wage)
    @show mean_wage

    return nothing
end

#-------------------------------------------------------------------------------
# question 4
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# part c
#-------------------------------------------------------------------------------

"""
matrixops(A, B)
    performs the following operations on matrices A and B:
    i computes the element-wise product of A and B
    ii computes the matrix product of A transpose and B
    iii computes the sum of all elements in A and B
"""

function matrixops(A::Array{Float64}, B::Array{Float64})
    #-----------------------------------------------------------------------
    # part e - check dimesion compatibility     
    #-----------------------------------------------------------------------

    if size(A) != size(B)
        error("matrices A and B must have the same dimensions")
    end

    #---------------------------------------------------------------------------
    # part b
    #---------------------------------------------------------------------------

    # i element-wise product of A and B
    out1 = A .* B

    # ii matrix product of A' and B
    out2 = A' * B

    # iii sum of all elements in A and B
    out3 = sum(A + B)

    return out1, out2, out3
end

function q4()
    #---------------------------------------------------------------------------
    # part a 
    #---------------------------------------------------------------------------

    @load "matrixpractice.jld" A B C D E F G

    #---------------------------------------------------------------------------
    # part d 
    #---------------------------------------------------------------------------

    matrixops(A, B)

    #---------------------------------------------------------------------------
    # part f 
    #---------------------------------------------------------------------------
    # test type check

    try 
        matrixops(C, D) 
    catch e
        println("trying matrixops(C, D:")
        @show e
        #println(e)
    end

    #---------------------------------------------------------------------------
    # part g
    #---------------------------------------------------------------------------

    nlsw88  = DataFrame(CSV.File("nlsw88_cleaned.csv")) # see text editor
    ttl_exp = convert(Array, nlsw88.ttl_exp)
    wage    = convert(Array, nlsw88.wage)
    matrixops(ttl_exp, wage)

    return nothing 
end

# call functions
A, B, C, D = q1()
q2(A, B, C)
q3()
q4()

#-------------------------------------------------------------------------------
# end of script
#-------------------------------------------------------------------------------

